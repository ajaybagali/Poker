<!--
  Author:    Ajay Bagali, Jon England, Ryan Furukawa
  Date:      12/7/2020
  Course:    CS 4540, University of Utah, School of Computing
  Copyright: CS 4540 and Ajay Bagali, Jon England, and  Ryan Furukawa - This work may not be copied for use in Academic Coursework.
  I, Ajay Bagali,Jon England, and Ryan Furukawa  certify that I wrote this code from scratch and did not copy it in part or whole from
  another source.  Any references used in the completion of the assignment are cited in my README file.
  File Contents
    Poker gameboard page
-->
@model Poker.Models.Game

@{
    ViewData["Title"] = "Game";
}
<body class="play_backgound" style="padding-left:0px; margin-left:0px; float:left;">
    <div class="input-group" style="float: left;">
        <input class="form-control" type="number" value="0" min="0" max="8000" step="10" style="max-width:150px;" id="betAmount" />
        <div class="input-group-append" id="button-addon4">
            <button class="btn btn-outline-primary" type="button" style="background-color:green; color:white;" id="betButton">Bet</button>
            <button class="btn btn-outline-secondary" type="button" style="background-color:black; color:white;" id="callButton">Call</button>
            <button class="btn btn-outline-secondary" type="button" style="background-color:red; color:white;" id=foldButton>Fold</button>
        </div>
    </div>

    <div class="game_background" id="game_background"></div>

</body>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.5/pixi.js"></script>
    <script src="https://pixijs.io/pixi-sound/dist/pixi-sound.js"></script>
    <script type="text/javascript" src="~/js/game.js"></script>
    <script type="text/javascript" src="~/js/setup.js"></script>
    <script type="text/javascript" src="~/js/game_board.js"></script>
    <script type="text/javascript" src="~/js/card_images.js"></script>

    <script type="text/javascript">

        //buttons call backend bet method to update game model
        $("#betButton").click(bet);
        function bet() {
            data = { id: @Model.ID, amount: document.getElementById("betAmount").value }
            $.post('/Games/Bet', data);
        }
        $("#callButton").click(call);
        function call() {
            data = { id: @Model.ID, amount: 0 }
            $.post('/Games/Bet', data);
        }
        $("#foldButton").click(fold);
        function fold() {
            data = { id: @Model.ID, amount: 1 }
            $.post('/Games/Bet', data);
        }

        //creates game board and instance
        var game = new Game();
        game.main();

        function worker() {
            data = { id: @Model.ID };
            $.post('/Games/Data', data)
                .done(function (result) {
                    //new game
                    if (result.turn != -1) {
                        //update the gameboard every second
                        game.draw_players(result.players, result.turn);
                        game.draw_pot(result.pot);
                        game.draw_river_cards(result.river1, result.river2, result.river3, result.river4, result.river5);
                        game.draw_message_board(result.action);
                        game.draw_minimum_bet(result.minimumBet);
                    }
                    if (result.turn === -2) {
                        window.location.replace("../Denied/3");
                    }
                    setTimeout(worker, 3000);
                });
        }

        //run worker function every 1/2 second in background
        window.onload = function () {
            setTimeout(worker, 500);
        };


    </script>
}

